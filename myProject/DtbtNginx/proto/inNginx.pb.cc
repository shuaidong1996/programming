// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: inNginx.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "inNginx.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
class HostNameDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<HostName>
     _instance;
} _HostName_default_instance_;
class VoteDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Vote>
     _instance;
} _Vote_default_instance_;
class AckVote2LeaderDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<AckVote2Leader>
     _instance;
} _AckVote2Leader_default_instance_;
class AckVote2FollowerDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<AckVote2Follower>
     _instance;
} _AckVote2Follower_default_instance_;
class SynchDataDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SynchData>
     _instance;
} _SynchData_default_instance_;
class AckData2LeaderDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<AckData2Leader>
     _instance;
} _AckData2Leader_default_instance_;
class AckData2FollowerDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<AckData2Follower>
     _instance;
} _AckData2Follower_default_instance_;
class KeepAliveDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<KeepAlive>
     _instance;
} _KeepAlive_default_instance_;
class Server2NginxDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Server2Nginx>
     _instance;
} _Server2Nginx_default_instance_;

namespace protobuf_inNginx_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[9];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HostName, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HostName, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HostName, ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HostName, port_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vote, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vote, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vote, version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vote, nginxname_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckVote2Leader, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckVote2Leader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckVote2Leader, version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckVote2Leader, nginxname_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckVote2Follower, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckVote2Follower, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckVote2Follower, version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckVote2Follower, nginxname_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynchData, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynchData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynchData, version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynchData, sernames_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckData2Leader, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckData2Leader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckData2Follower, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckData2Follower, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeepAlive, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeepAlive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Server2Nginx, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Server2Nginx, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Server2Nginx, port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Server2Nginx, text_),
  1,
  0,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(HostName)},
  { 9, 16, sizeof(Vote)},
  { 18, 25, sizeof(AckVote2Leader)},
  { 27, 34, sizeof(AckVote2Follower)},
  { 36, 43, sizeof(SynchData)},
  { 45, 50, sizeof(AckData2Leader)},
  { 50, 55, sizeof(AckData2Follower)},
  { 55, 60, sizeof(KeepAlive)},
  { 60, 67, sizeof(Server2Nginx)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_HostName_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Vote_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AckVote2Leader_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AckVote2Follower_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SynchData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AckData2Leader_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AckData2Follower_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_KeepAlive_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Server2Nginx_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "inNginx.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 9);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _HostName_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_HostName_default_instance_);_Vote_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Vote_default_instance_);_AckVote2Leader_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_AckVote2Leader_default_instance_);_AckVote2Follower_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_AckVote2Follower_default_instance_);_SynchData_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SynchData_default_instance_);_AckData2Leader_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_AckData2Leader_default_instance_);_AckData2Follower_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_AckData2Follower_default_instance_);_KeepAlive_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_KeepAlive_default_instance_);_Server2Nginx_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Server2Nginx_default_instance_);}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\rinNginx.proto\"$\n\010HostName\022\n\n\002ip\030\001 \002(\t\022"
      "\014\n\004port\030\002 \002(\r\"*\n\004Vote\022\017\n\007version\030\001 \002(\r\022\021"
      "\n\tnginxName\030\002 \002(\t\"4\n\016AckVote2Leader\022\017\n\007v"
      "ersion\030\001 \002(\r\022\021\n\tnginxName\030\002 \002(\t\"6\n\020AckVo"
      "te2Follower\022\017\n\007version\030\001 \002(\r\022\021\n\tnginxNam"
      "e\030\002 \002(\t\".\n\tSynchData\022\017\n\007version\030\001 \002(\r\022\020\n"
      "\010sernames\030\002 \003(\t\"\020\n\016AckData2Leader\"\022\n\020Ack"
      "Data2Follower\"\013\n\tKeepAlive\"*\n\014Server2Ngi"
      "nx\022\014\n\004port\030\001 \002(\r\022\014\n\004text\030\002 \002(\t"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 350);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "inNginx.proto", &protobuf_RegisterTypes);
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_inNginx_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HostName::kIpFieldNumber;
const int HostName::kPortFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HostName::HostName()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_inNginx_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:HostName)
}
HostName::HostName(const HostName& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_ip()) {
    ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  port_ = from.port_;
  // @@protoc_insertion_point(copy_constructor:HostName)
}

void HostName::SharedCtor() {
  _cached_size_ = 0;
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_ = 0u;
}

HostName::~HostName() {
  // @@protoc_insertion_point(destructor:HostName)
  SharedDtor();
}

void HostName::SharedDtor() {
  ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void HostName::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HostName::descriptor() {
  protobuf_inNginx_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_inNginx_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HostName& HostName::default_instance() {
  protobuf_inNginx_2eproto::InitDefaults();
  return *internal_default_instance();
}

HostName* HostName::New(::google::protobuf::Arena* arena) const {
  HostName* n = new HostName;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HostName::Clear() {
// @@protoc_insertion_point(message_clear_start:HostName)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_ip()) {
    GOOGLE_DCHECK(!ip_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*ip_.UnsafeRawStringPointer())->clear();
  }
  port_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool HostName::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:HostName)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string ip = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ip().data(), static_cast<int>(this->ip().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "HostName.ip");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 port = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_port();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:HostName)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:HostName)
  return false;
#undef DO_
}

void HostName::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:HostName)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string ip = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), static_cast<int>(this->ip().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "HostName.ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->ip(), output);
  }

  // required uint32 port = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->port(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:HostName)
}

::google::protobuf::uint8* HostName::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:HostName)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string ip = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), static_cast<int>(this->ip().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "HostName.ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ip(), target);
  }

  // required uint32 port = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->port(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HostName)
  return target;
}

size_t HostName::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:HostName)
  size_t total_size = 0;

  if (has_ip()) {
    // required string ip = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ip());
  }

  if (has_port()) {
    // required uint32 port = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->port());
  }

  return total_size;
}
size_t HostName::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HostName)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string ip = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ip());

    // required uint32 port = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->port());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HostName::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:HostName)
  GOOGLE_DCHECK_NE(&from, this);
  const HostName* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HostName>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:HostName)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:HostName)
    MergeFrom(*source);
  }
}

void HostName::MergeFrom(const HostName& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:HostName)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_ip();
      ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
    }
    if (cached_has_bits & 0x00000002u) {
      port_ = from.port_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void HostName::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:HostName)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HostName::CopyFrom(const HostName& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HostName)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HostName::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void HostName::Swap(HostName* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HostName::InternalSwap(HostName* other) {
  using std::swap;
  ip_.Swap(&other->ip_);
  swap(port_, other->port_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HostName::GetMetadata() const {
  protobuf_inNginx_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_inNginx_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HostName

// required string ip = 1;
bool HostName::has_ip() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void HostName::set_has_ip() {
  _has_bits_[0] |= 0x00000001u;
}
void HostName::clear_has_ip() {
  _has_bits_[0] &= ~0x00000001u;
}
void HostName::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ip();
}
const ::std::string& HostName::ip() const {
  // @@protoc_insertion_point(field_get:HostName.ip)
  return ip_.GetNoArena();
}
void HostName::set_ip(const ::std::string& value) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:HostName.ip)
}
#if LANG_CXX11
void HostName::set_ip(::std::string&& value) {
  set_has_ip();
  ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:HostName.ip)
}
#endif
void HostName::set_ip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:HostName.ip)
}
void HostName::set_ip(const char* value, size_t size) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:HostName.ip)
}
::std::string* HostName::mutable_ip() {
  set_has_ip();
  // @@protoc_insertion_point(field_mutable:HostName.ip)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* HostName::release_ip() {
  // @@protoc_insertion_point(field_release:HostName.ip)
  clear_has_ip();
  return ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void HostName::set_allocated_ip(::std::string* ip) {
  if (ip != NULL) {
    set_has_ip();
  } else {
    clear_has_ip();
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:HostName.ip)
}

// required uint32 port = 2;
bool HostName::has_port() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void HostName::set_has_port() {
  _has_bits_[0] |= 0x00000002u;
}
void HostName::clear_has_port() {
  _has_bits_[0] &= ~0x00000002u;
}
void HostName::clear_port() {
  port_ = 0u;
  clear_has_port();
}
::google::protobuf::uint32 HostName::port() const {
  // @@protoc_insertion_point(field_get:HostName.port)
  return port_;
}
void HostName::set_port(::google::protobuf::uint32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:HostName.port)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Vote::kVersionFieldNumber;
const int Vote::kNginxNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Vote::Vote()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_inNginx_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Vote)
}
Vote::Vote(const Vote& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  nginxname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_nginxname()) {
    nginxname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nginxname_);
  }
  version_ = from.version_;
  // @@protoc_insertion_point(copy_constructor:Vote)
}

void Vote::SharedCtor() {
  _cached_size_ = 0;
  nginxname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_ = 0u;
}

Vote::~Vote() {
  // @@protoc_insertion_point(destructor:Vote)
  SharedDtor();
}

void Vote::SharedDtor() {
  nginxname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Vote::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Vote::descriptor() {
  protobuf_inNginx_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_inNginx_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Vote& Vote::default_instance() {
  protobuf_inNginx_2eproto::InitDefaults();
  return *internal_default_instance();
}

Vote* Vote::New(::google::protobuf::Arena* arena) const {
  Vote* n = new Vote;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Vote::Clear() {
// @@protoc_insertion_point(message_clear_start:Vote)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_nginxname()) {
    GOOGLE_DCHECK(!nginxname_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*nginxname_.UnsafeRawStringPointer())->clear();
  }
  version_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Vote::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Vote)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 version = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string nginxName = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nginxname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->nginxname().data(), static_cast<int>(this->nginxname().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Vote.nginxName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Vote)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Vote)
  return false;
#undef DO_
}

void Vote::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Vote)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 version = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->version(), output);
  }

  // required string nginxName = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nginxname().data(), static_cast<int>(this->nginxname().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Vote.nginxName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->nginxname(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Vote)
}

::google::protobuf::uint8* Vote::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Vote)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 version = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->version(), target);
  }

  // required string nginxName = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nginxname().data(), static_cast<int>(this->nginxname().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Vote.nginxName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->nginxname(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Vote)
  return target;
}

size_t Vote::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Vote)
  size_t total_size = 0;

  if (has_nginxname()) {
    // required string nginxName = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->nginxname());
  }

  if (has_version()) {
    // required uint32 version = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->version());
  }

  return total_size;
}
size_t Vote::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Vote)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string nginxName = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->nginxname());

    // required uint32 version = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->version());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Vote::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Vote)
  GOOGLE_DCHECK_NE(&from, this);
  const Vote* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Vote>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Vote)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Vote)
    MergeFrom(*source);
  }
}

void Vote::MergeFrom(const Vote& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Vote)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_nginxname();
      nginxname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nginxname_);
    }
    if (cached_has_bits & 0x00000002u) {
      version_ = from.version_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Vote::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Vote)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vote::CopyFrom(const Vote& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Vote)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vote::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void Vote::Swap(Vote* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Vote::InternalSwap(Vote* other) {
  using std::swap;
  nginxname_.Swap(&other->nginxname_);
  swap(version_, other->version_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Vote::GetMetadata() const {
  protobuf_inNginx_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_inNginx_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Vote

// required uint32 version = 1;
bool Vote::has_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Vote::set_has_version() {
  _has_bits_[0] |= 0x00000002u;
}
void Vote::clear_has_version() {
  _has_bits_[0] &= ~0x00000002u;
}
void Vote::clear_version() {
  version_ = 0u;
  clear_has_version();
}
::google::protobuf::uint32 Vote::version() const {
  // @@protoc_insertion_point(field_get:Vote.version)
  return version_;
}
void Vote::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:Vote.version)
}

// required string nginxName = 2;
bool Vote::has_nginxname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Vote::set_has_nginxname() {
  _has_bits_[0] |= 0x00000001u;
}
void Vote::clear_has_nginxname() {
  _has_bits_[0] &= ~0x00000001u;
}
void Vote::clear_nginxname() {
  nginxname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_nginxname();
}
const ::std::string& Vote::nginxname() const {
  // @@protoc_insertion_point(field_get:Vote.nginxName)
  return nginxname_.GetNoArena();
}
void Vote::set_nginxname(const ::std::string& value) {
  set_has_nginxname();
  nginxname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Vote.nginxName)
}
#if LANG_CXX11
void Vote::set_nginxname(::std::string&& value) {
  set_has_nginxname();
  nginxname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Vote.nginxName)
}
#endif
void Vote::set_nginxname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_nginxname();
  nginxname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Vote.nginxName)
}
void Vote::set_nginxname(const char* value, size_t size) {
  set_has_nginxname();
  nginxname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Vote.nginxName)
}
::std::string* Vote::mutable_nginxname() {
  set_has_nginxname();
  // @@protoc_insertion_point(field_mutable:Vote.nginxName)
  return nginxname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Vote::release_nginxname() {
  // @@protoc_insertion_point(field_release:Vote.nginxName)
  clear_has_nginxname();
  return nginxname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Vote::set_allocated_nginxname(::std::string* nginxname) {
  if (nginxname != NULL) {
    set_has_nginxname();
  } else {
    clear_has_nginxname();
  }
  nginxname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nginxname);
  // @@protoc_insertion_point(field_set_allocated:Vote.nginxName)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AckVote2Leader::kVersionFieldNumber;
const int AckVote2Leader::kNginxNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AckVote2Leader::AckVote2Leader()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_inNginx_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:AckVote2Leader)
}
AckVote2Leader::AckVote2Leader(const AckVote2Leader& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  nginxname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_nginxname()) {
    nginxname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nginxname_);
  }
  version_ = from.version_;
  // @@protoc_insertion_point(copy_constructor:AckVote2Leader)
}

void AckVote2Leader::SharedCtor() {
  _cached_size_ = 0;
  nginxname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_ = 0u;
}

AckVote2Leader::~AckVote2Leader() {
  // @@protoc_insertion_point(destructor:AckVote2Leader)
  SharedDtor();
}

void AckVote2Leader::SharedDtor() {
  nginxname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AckVote2Leader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckVote2Leader::descriptor() {
  protobuf_inNginx_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_inNginx_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AckVote2Leader& AckVote2Leader::default_instance() {
  protobuf_inNginx_2eproto::InitDefaults();
  return *internal_default_instance();
}

AckVote2Leader* AckVote2Leader::New(::google::protobuf::Arena* arena) const {
  AckVote2Leader* n = new AckVote2Leader;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AckVote2Leader::Clear() {
// @@protoc_insertion_point(message_clear_start:AckVote2Leader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_nginxname()) {
    GOOGLE_DCHECK(!nginxname_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*nginxname_.UnsafeRawStringPointer())->clear();
  }
  version_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AckVote2Leader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AckVote2Leader)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 version = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string nginxName = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nginxname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->nginxname().data(), static_cast<int>(this->nginxname().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "AckVote2Leader.nginxName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AckVote2Leader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AckVote2Leader)
  return false;
#undef DO_
}

void AckVote2Leader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AckVote2Leader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 version = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->version(), output);
  }

  // required string nginxName = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nginxname().data(), static_cast<int>(this->nginxname().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "AckVote2Leader.nginxName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->nginxname(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AckVote2Leader)
}

::google::protobuf::uint8* AckVote2Leader::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:AckVote2Leader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 version = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->version(), target);
  }

  // required string nginxName = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nginxname().data(), static_cast<int>(this->nginxname().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "AckVote2Leader.nginxName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->nginxname(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AckVote2Leader)
  return target;
}

size_t AckVote2Leader::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:AckVote2Leader)
  size_t total_size = 0;

  if (has_nginxname()) {
    // required string nginxName = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->nginxname());
  }

  if (has_version()) {
    // required uint32 version = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->version());
  }

  return total_size;
}
size_t AckVote2Leader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AckVote2Leader)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string nginxName = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->nginxname());

    // required uint32 version = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->version());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckVote2Leader::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AckVote2Leader)
  GOOGLE_DCHECK_NE(&from, this);
  const AckVote2Leader* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AckVote2Leader>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AckVote2Leader)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AckVote2Leader)
    MergeFrom(*source);
  }
}

void AckVote2Leader::MergeFrom(const AckVote2Leader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AckVote2Leader)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_nginxname();
      nginxname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nginxname_);
    }
    if (cached_has_bits & 0x00000002u) {
      version_ = from.version_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AckVote2Leader::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AckVote2Leader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckVote2Leader::CopyFrom(const AckVote2Leader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AckVote2Leader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckVote2Leader::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void AckVote2Leader::Swap(AckVote2Leader* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AckVote2Leader::InternalSwap(AckVote2Leader* other) {
  using std::swap;
  nginxname_.Swap(&other->nginxname_);
  swap(version_, other->version_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AckVote2Leader::GetMetadata() const {
  protobuf_inNginx_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_inNginx_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AckVote2Leader

// required uint32 version = 1;
bool AckVote2Leader::has_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void AckVote2Leader::set_has_version() {
  _has_bits_[0] |= 0x00000002u;
}
void AckVote2Leader::clear_has_version() {
  _has_bits_[0] &= ~0x00000002u;
}
void AckVote2Leader::clear_version() {
  version_ = 0u;
  clear_has_version();
}
::google::protobuf::uint32 AckVote2Leader::version() const {
  // @@protoc_insertion_point(field_get:AckVote2Leader.version)
  return version_;
}
void AckVote2Leader::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:AckVote2Leader.version)
}

// required string nginxName = 2;
bool AckVote2Leader::has_nginxname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void AckVote2Leader::set_has_nginxname() {
  _has_bits_[0] |= 0x00000001u;
}
void AckVote2Leader::clear_has_nginxname() {
  _has_bits_[0] &= ~0x00000001u;
}
void AckVote2Leader::clear_nginxname() {
  nginxname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_nginxname();
}
const ::std::string& AckVote2Leader::nginxname() const {
  // @@protoc_insertion_point(field_get:AckVote2Leader.nginxName)
  return nginxname_.GetNoArena();
}
void AckVote2Leader::set_nginxname(const ::std::string& value) {
  set_has_nginxname();
  nginxname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AckVote2Leader.nginxName)
}
#if LANG_CXX11
void AckVote2Leader::set_nginxname(::std::string&& value) {
  set_has_nginxname();
  nginxname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AckVote2Leader.nginxName)
}
#endif
void AckVote2Leader::set_nginxname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_nginxname();
  nginxname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AckVote2Leader.nginxName)
}
void AckVote2Leader::set_nginxname(const char* value, size_t size) {
  set_has_nginxname();
  nginxname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AckVote2Leader.nginxName)
}
::std::string* AckVote2Leader::mutable_nginxname() {
  set_has_nginxname();
  // @@protoc_insertion_point(field_mutable:AckVote2Leader.nginxName)
  return nginxname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AckVote2Leader::release_nginxname() {
  // @@protoc_insertion_point(field_release:AckVote2Leader.nginxName)
  clear_has_nginxname();
  return nginxname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AckVote2Leader::set_allocated_nginxname(::std::string* nginxname) {
  if (nginxname != NULL) {
    set_has_nginxname();
  } else {
    clear_has_nginxname();
  }
  nginxname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nginxname);
  // @@protoc_insertion_point(field_set_allocated:AckVote2Leader.nginxName)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AckVote2Follower::kVersionFieldNumber;
const int AckVote2Follower::kNginxNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AckVote2Follower::AckVote2Follower()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_inNginx_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:AckVote2Follower)
}
AckVote2Follower::AckVote2Follower(const AckVote2Follower& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  nginxname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_nginxname()) {
    nginxname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nginxname_);
  }
  version_ = from.version_;
  // @@protoc_insertion_point(copy_constructor:AckVote2Follower)
}

void AckVote2Follower::SharedCtor() {
  _cached_size_ = 0;
  nginxname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_ = 0u;
}

AckVote2Follower::~AckVote2Follower() {
  // @@protoc_insertion_point(destructor:AckVote2Follower)
  SharedDtor();
}

void AckVote2Follower::SharedDtor() {
  nginxname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AckVote2Follower::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckVote2Follower::descriptor() {
  protobuf_inNginx_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_inNginx_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AckVote2Follower& AckVote2Follower::default_instance() {
  protobuf_inNginx_2eproto::InitDefaults();
  return *internal_default_instance();
}

AckVote2Follower* AckVote2Follower::New(::google::protobuf::Arena* arena) const {
  AckVote2Follower* n = new AckVote2Follower;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AckVote2Follower::Clear() {
// @@protoc_insertion_point(message_clear_start:AckVote2Follower)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_nginxname()) {
    GOOGLE_DCHECK(!nginxname_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*nginxname_.UnsafeRawStringPointer())->clear();
  }
  version_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AckVote2Follower::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AckVote2Follower)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 version = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string nginxName = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nginxname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->nginxname().data(), static_cast<int>(this->nginxname().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "AckVote2Follower.nginxName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AckVote2Follower)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AckVote2Follower)
  return false;
#undef DO_
}

void AckVote2Follower::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AckVote2Follower)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 version = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->version(), output);
  }

  // required string nginxName = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nginxname().data(), static_cast<int>(this->nginxname().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "AckVote2Follower.nginxName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->nginxname(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AckVote2Follower)
}

::google::protobuf::uint8* AckVote2Follower::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:AckVote2Follower)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 version = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->version(), target);
  }

  // required string nginxName = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nginxname().data(), static_cast<int>(this->nginxname().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "AckVote2Follower.nginxName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->nginxname(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AckVote2Follower)
  return target;
}

size_t AckVote2Follower::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:AckVote2Follower)
  size_t total_size = 0;

  if (has_nginxname()) {
    // required string nginxName = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->nginxname());
  }

  if (has_version()) {
    // required uint32 version = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->version());
  }

  return total_size;
}
size_t AckVote2Follower::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AckVote2Follower)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string nginxName = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->nginxname());

    // required uint32 version = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->version());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckVote2Follower::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AckVote2Follower)
  GOOGLE_DCHECK_NE(&from, this);
  const AckVote2Follower* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AckVote2Follower>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AckVote2Follower)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AckVote2Follower)
    MergeFrom(*source);
  }
}

void AckVote2Follower::MergeFrom(const AckVote2Follower& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AckVote2Follower)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_nginxname();
      nginxname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nginxname_);
    }
    if (cached_has_bits & 0x00000002u) {
      version_ = from.version_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AckVote2Follower::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AckVote2Follower)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckVote2Follower::CopyFrom(const AckVote2Follower& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AckVote2Follower)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckVote2Follower::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void AckVote2Follower::Swap(AckVote2Follower* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AckVote2Follower::InternalSwap(AckVote2Follower* other) {
  using std::swap;
  nginxname_.Swap(&other->nginxname_);
  swap(version_, other->version_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AckVote2Follower::GetMetadata() const {
  protobuf_inNginx_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_inNginx_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AckVote2Follower

// required uint32 version = 1;
bool AckVote2Follower::has_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void AckVote2Follower::set_has_version() {
  _has_bits_[0] |= 0x00000002u;
}
void AckVote2Follower::clear_has_version() {
  _has_bits_[0] &= ~0x00000002u;
}
void AckVote2Follower::clear_version() {
  version_ = 0u;
  clear_has_version();
}
::google::protobuf::uint32 AckVote2Follower::version() const {
  // @@protoc_insertion_point(field_get:AckVote2Follower.version)
  return version_;
}
void AckVote2Follower::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:AckVote2Follower.version)
}

// required string nginxName = 2;
bool AckVote2Follower::has_nginxname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void AckVote2Follower::set_has_nginxname() {
  _has_bits_[0] |= 0x00000001u;
}
void AckVote2Follower::clear_has_nginxname() {
  _has_bits_[0] &= ~0x00000001u;
}
void AckVote2Follower::clear_nginxname() {
  nginxname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_nginxname();
}
const ::std::string& AckVote2Follower::nginxname() const {
  // @@protoc_insertion_point(field_get:AckVote2Follower.nginxName)
  return nginxname_.GetNoArena();
}
void AckVote2Follower::set_nginxname(const ::std::string& value) {
  set_has_nginxname();
  nginxname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AckVote2Follower.nginxName)
}
#if LANG_CXX11
void AckVote2Follower::set_nginxname(::std::string&& value) {
  set_has_nginxname();
  nginxname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AckVote2Follower.nginxName)
}
#endif
void AckVote2Follower::set_nginxname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_nginxname();
  nginxname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AckVote2Follower.nginxName)
}
void AckVote2Follower::set_nginxname(const char* value, size_t size) {
  set_has_nginxname();
  nginxname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AckVote2Follower.nginxName)
}
::std::string* AckVote2Follower::mutable_nginxname() {
  set_has_nginxname();
  // @@protoc_insertion_point(field_mutable:AckVote2Follower.nginxName)
  return nginxname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AckVote2Follower::release_nginxname() {
  // @@protoc_insertion_point(field_release:AckVote2Follower.nginxName)
  clear_has_nginxname();
  return nginxname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AckVote2Follower::set_allocated_nginxname(::std::string* nginxname) {
  if (nginxname != NULL) {
    set_has_nginxname();
  } else {
    clear_has_nginxname();
  }
  nginxname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nginxname);
  // @@protoc_insertion_point(field_set_allocated:AckVote2Follower.nginxName)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SynchData::kVersionFieldNumber;
const int SynchData::kSernamesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SynchData::SynchData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_inNginx_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:SynchData)
}
SynchData::SynchData(const SynchData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      sernames_(from.sernames_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  version_ = from.version_;
  // @@protoc_insertion_point(copy_constructor:SynchData)
}

void SynchData::SharedCtor() {
  _cached_size_ = 0;
  version_ = 0u;
}

SynchData::~SynchData() {
  // @@protoc_insertion_point(destructor:SynchData)
  SharedDtor();
}

void SynchData::SharedDtor() {
}

void SynchData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SynchData::descriptor() {
  protobuf_inNginx_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_inNginx_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SynchData& SynchData::default_instance() {
  protobuf_inNginx_2eproto::InitDefaults();
  return *internal_default_instance();
}

SynchData* SynchData::New(::google::protobuf::Arena* arena) const {
  SynchData* n = new SynchData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SynchData::Clear() {
// @@protoc_insertion_point(message_clear_start:SynchData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sernames_.Clear();
  version_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SynchData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SynchData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 version = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string sernames = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_sernames()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sernames(this->sernames_size() - 1).data(),
            static_cast<int>(this->sernames(this->sernames_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "SynchData.sernames");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SynchData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SynchData)
  return false;
#undef DO_
}

void SynchData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SynchData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 version = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->version(), output);
  }

  // repeated string sernames = 2;
  for (int i = 0, n = this->sernames_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sernames(i).data(), static_cast<int>(this->sernames(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SynchData.sernames");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->sernames(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SynchData)
}

::google::protobuf::uint8* SynchData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SynchData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 version = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->version(), target);
  }

  // repeated string sernames = 2;
  for (int i = 0, n = this->sernames_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sernames(i).data(), static_cast<int>(this->sernames(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SynchData.sernames");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->sernames(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SynchData)
  return target;
}

size_t SynchData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SynchData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required uint32 version = 1;
  if (has_version()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->version());
  }
  // repeated string sernames = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->sernames_size());
  for (int i = 0, n = this->sernames_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->sernames(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SynchData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SynchData)
  GOOGLE_DCHECK_NE(&from, this);
  const SynchData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SynchData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SynchData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SynchData)
    MergeFrom(*source);
  }
}

void SynchData::MergeFrom(const SynchData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SynchData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sernames_.MergeFrom(from.sernames_);
  if (from.has_version()) {
    set_version(from.version());
  }
}

void SynchData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SynchData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SynchData::CopyFrom(const SynchData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SynchData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SynchData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void SynchData::Swap(SynchData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SynchData::InternalSwap(SynchData* other) {
  using std::swap;
  sernames_.InternalSwap(&other->sernames_);
  swap(version_, other->version_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SynchData::GetMetadata() const {
  protobuf_inNginx_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_inNginx_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SynchData

// required uint32 version = 1;
bool SynchData::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SynchData::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
void SynchData::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
void SynchData::clear_version() {
  version_ = 0u;
  clear_has_version();
}
::google::protobuf::uint32 SynchData::version() const {
  // @@protoc_insertion_point(field_get:SynchData.version)
  return version_;
}
void SynchData::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:SynchData.version)
}

// repeated string sernames = 2;
int SynchData::sernames_size() const {
  return sernames_.size();
}
void SynchData::clear_sernames() {
  sernames_.Clear();
}
const ::std::string& SynchData::sernames(int index) const {
  // @@protoc_insertion_point(field_get:SynchData.sernames)
  return sernames_.Get(index);
}
::std::string* SynchData::mutable_sernames(int index) {
  // @@protoc_insertion_point(field_mutable:SynchData.sernames)
  return sernames_.Mutable(index);
}
void SynchData::set_sernames(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:SynchData.sernames)
  sernames_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void SynchData::set_sernames(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:SynchData.sernames)
  sernames_.Mutable(index)->assign(std::move(value));
}
#endif
void SynchData::set_sernames(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  sernames_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:SynchData.sernames)
}
void SynchData::set_sernames(int index, const char* value, size_t size) {
  sernames_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SynchData.sernames)
}
::std::string* SynchData::add_sernames() {
  // @@protoc_insertion_point(field_add_mutable:SynchData.sernames)
  return sernames_.Add();
}
void SynchData::add_sernames(const ::std::string& value) {
  sernames_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:SynchData.sernames)
}
#if LANG_CXX11
void SynchData::add_sernames(::std::string&& value) {
  sernames_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:SynchData.sernames)
}
#endif
void SynchData::add_sernames(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  sernames_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:SynchData.sernames)
}
void SynchData::add_sernames(const char* value, size_t size) {
  sernames_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:SynchData.sernames)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
SynchData::sernames() const {
  // @@protoc_insertion_point(field_list:SynchData.sernames)
  return sernames_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
SynchData::mutable_sernames() {
  // @@protoc_insertion_point(field_mutable_list:SynchData.sernames)
  return &sernames_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AckData2Leader::AckData2Leader()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_inNginx_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:AckData2Leader)
}
AckData2Leader::AckData2Leader(const AckData2Leader& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:AckData2Leader)
}

void AckData2Leader::SharedCtor() {
  _cached_size_ = 0;
}

AckData2Leader::~AckData2Leader() {
  // @@protoc_insertion_point(destructor:AckData2Leader)
  SharedDtor();
}

void AckData2Leader::SharedDtor() {
}

void AckData2Leader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckData2Leader::descriptor() {
  protobuf_inNginx_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_inNginx_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AckData2Leader& AckData2Leader::default_instance() {
  protobuf_inNginx_2eproto::InitDefaults();
  return *internal_default_instance();
}

AckData2Leader* AckData2Leader::New(::google::protobuf::Arena* arena) const {
  AckData2Leader* n = new AckData2Leader;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AckData2Leader::Clear() {
// @@protoc_insertion_point(message_clear_start:AckData2Leader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AckData2Leader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AckData2Leader)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:AckData2Leader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AckData2Leader)
  return false;
#undef DO_
}

void AckData2Leader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AckData2Leader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AckData2Leader)
}

::google::protobuf::uint8* AckData2Leader::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:AckData2Leader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AckData2Leader)
  return target;
}

size_t AckData2Leader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AckData2Leader)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckData2Leader::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AckData2Leader)
  GOOGLE_DCHECK_NE(&from, this);
  const AckData2Leader* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AckData2Leader>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AckData2Leader)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AckData2Leader)
    MergeFrom(*source);
  }
}

void AckData2Leader::MergeFrom(const AckData2Leader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AckData2Leader)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void AckData2Leader::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AckData2Leader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckData2Leader::CopyFrom(const AckData2Leader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AckData2Leader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckData2Leader::IsInitialized() const {
  return true;
}

void AckData2Leader::Swap(AckData2Leader* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AckData2Leader::InternalSwap(AckData2Leader* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AckData2Leader::GetMetadata() const {
  protobuf_inNginx_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_inNginx_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AckData2Leader

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AckData2Follower::AckData2Follower()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_inNginx_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:AckData2Follower)
}
AckData2Follower::AckData2Follower(const AckData2Follower& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:AckData2Follower)
}

void AckData2Follower::SharedCtor() {
  _cached_size_ = 0;
}

AckData2Follower::~AckData2Follower() {
  // @@protoc_insertion_point(destructor:AckData2Follower)
  SharedDtor();
}

void AckData2Follower::SharedDtor() {
}

void AckData2Follower::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckData2Follower::descriptor() {
  protobuf_inNginx_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_inNginx_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AckData2Follower& AckData2Follower::default_instance() {
  protobuf_inNginx_2eproto::InitDefaults();
  return *internal_default_instance();
}

AckData2Follower* AckData2Follower::New(::google::protobuf::Arena* arena) const {
  AckData2Follower* n = new AckData2Follower;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AckData2Follower::Clear() {
// @@protoc_insertion_point(message_clear_start:AckData2Follower)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AckData2Follower::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AckData2Follower)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:AckData2Follower)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AckData2Follower)
  return false;
#undef DO_
}

void AckData2Follower::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AckData2Follower)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AckData2Follower)
}

::google::protobuf::uint8* AckData2Follower::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:AckData2Follower)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AckData2Follower)
  return target;
}

size_t AckData2Follower::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AckData2Follower)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckData2Follower::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AckData2Follower)
  GOOGLE_DCHECK_NE(&from, this);
  const AckData2Follower* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AckData2Follower>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AckData2Follower)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AckData2Follower)
    MergeFrom(*source);
  }
}

void AckData2Follower::MergeFrom(const AckData2Follower& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AckData2Follower)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void AckData2Follower::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AckData2Follower)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckData2Follower::CopyFrom(const AckData2Follower& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AckData2Follower)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckData2Follower::IsInitialized() const {
  return true;
}

void AckData2Follower::Swap(AckData2Follower* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AckData2Follower::InternalSwap(AckData2Follower* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AckData2Follower::GetMetadata() const {
  protobuf_inNginx_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_inNginx_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AckData2Follower

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

KeepAlive::KeepAlive()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_inNginx_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:KeepAlive)
}
KeepAlive::KeepAlive(const KeepAlive& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:KeepAlive)
}

void KeepAlive::SharedCtor() {
  _cached_size_ = 0;
}

KeepAlive::~KeepAlive() {
  // @@protoc_insertion_point(destructor:KeepAlive)
  SharedDtor();
}

void KeepAlive::SharedDtor() {
}

void KeepAlive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KeepAlive::descriptor() {
  protobuf_inNginx_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_inNginx_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const KeepAlive& KeepAlive::default_instance() {
  protobuf_inNginx_2eproto::InitDefaults();
  return *internal_default_instance();
}

KeepAlive* KeepAlive::New(::google::protobuf::Arena* arena) const {
  KeepAlive* n = new KeepAlive;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void KeepAlive::Clear() {
// @@protoc_insertion_point(message_clear_start:KeepAlive)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool KeepAlive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:KeepAlive)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:KeepAlive)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:KeepAlive)
  return false;
#undef DO_
}

void KeepAlive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:KeepAlive)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:KeepAlive)
}

::google::protobuf::uint8* KeepAlive::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:KeepAlive)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KeepAlive)
  return target;
}

size_t KeepAlive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KeepAlive)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KeepAlive::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KeepAlive)
  GOOGLE_DCHECK_NE(&from, this);
  const KeepAlive* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const KeepAlive>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KeepAlive)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KeepAlive)
    MergeFrom(*source);
  }
}

void KeepAlive::MergeFrom(const KeepAlive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KeepAlive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void KeepAlive::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KeepAlive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KeepAlive::CopyFrom(const KeepAlive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KeepAlive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeepAlive::IsInitialized() const {
  return true;
}

void KeepAlive::Swap(KeepAlive* other) {
  if (other == this) return;
  InternalSwap(other);
}
void KeepAlive::InternalSwap(KeepAlive* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata KeepAlive::GetMetadata() const {
  protobuf_inNginx_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_inNginx_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// KeepAlive

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Server2Nginx::kPortFieldNumber;
const int Server2Nginx::kTextFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Server2Nginx::Server2Nginx()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_inNginx_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Server2Nginx)
}
Server2Nginx::Server2Nginx(const Server2Nginx& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_text()) {
    text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
  port_ = from.port_;
  // @@protoc_insertion_point(copy_constructor:Server2Nginx)
}

void Server2Nginx::SharedCtor() {
  _cached_size_ = 0;
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_ = 0u;
}

Server2Nginx::~Server2Nginx() {
  // @@protoc_insertion_point(destructor:Server2Nginx)
  SharedDtor();
}

void Server2Nginx::SharedDtor() {
  text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Server2Nginx::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Server2Nginx::descriptor() {
  protobuf_inNginx_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_inNginx_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Server2Nginx& Server2Nginx::default_instance() {
  protobuf_inNginx_2eproto::InitDefaults();
  return *internal_default_instance();
}

Server2Nginx* Server2Nginx::New(::google::protobuf::Arena* arena) const {
  Server2Nginx* n = new Server2Nginx;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Server2Nginx::Clear() {
// @@protoc_insertion_point(message_clear_start:Server2Nginx)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_text()) {
    GOOGLE_DCHECK(!text_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*text_.UnsafeRawStringPointer())->clear();
  }
  port_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Server2Nginx::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Server2Nginx)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 port = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_port();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string text = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->text().data(), static_cast<int>(this->text().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Server2Nginx.text");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Server2Nginx)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Server2Nginx)
  return false;
#undef DO_
}

void Server2Nginx::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Server2Nginx)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 port = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->port(), output);
  }

  // required string text = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), static_cast<int>(this->text().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Server2Nginx.text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->text(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Server2Nginx)
}

::google::protobuf::uint8* Server2Nginx::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Server2Nginx)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 port = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->port(), target);
  }

  // required string text = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), static_cast<int>(this->text().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Server2Nginx.text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->text(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Server2Nginx)
  return target;
}

size_t Server2Nginx::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Server2Nginx)
  size_t total_size = 0;

  if (has_text()) {
    // required string text = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->text());
  }

  if (has_port()) {
    // required uint32 port = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->port());
  }

  return total_size;
}
size_t Server2Nginx::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Server2Nginx)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string text = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->text());

    // required uint32 port = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->port());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Server2Nginx::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Server2Nginx)
  GOOGLE_DCHECK_NE(&from, this);
  const Server2Nginx* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Server2Nginx>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Server2Nginx)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Server2Nginx)
    MergeFrom(*source);
  }
}

void Server2Nginx::MergeFrom(const Server2Nginx& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Server2Nginx)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_text();
      text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
    }
    if (cached_has_bits & 0x00000002u) {
      port_ = from.port_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Server2Nginx::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Server2Nginx)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Server2Nginx::CopyFrom(const Server2Nginx& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Server2Nginx)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Server2Nginx::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void Server2Nginx::Swap(Server2Nginx* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Server2Nginx::InternalSwap(Server2Nginx* other) {
  using std::swap;
  text_.Swap(&other->text_);
  swap(port_, other->port_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Server2Nginx::GetMetadata() const {
  protobuf_inNginx_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_inNginx_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Server2Nginx

// required uint32 port = 1;
bool Server2Nginx::has_port() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Server2Nginx::set_has_port() {
  _has_bits_[0] |= 0x00000002u;
}
void Server2Nginx::clear_has_port() {
  _has_bits_[0] &= ~0x00000002u;
}
void Server2Nginx::clear_port() {
  port_ = 0u;
  clear_has_port();
}
::google::protobuf::uint32 Server2Nginx::port() const {
  // @@protoc_insertion_point(field_get:Server2Nginx.port)
  return port_;
}
void Server2Nginx::set_port(::google::protobuf::uint32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:Server2Nginx.port)
}

// required string text = 2;
bool Server2Nginx::has_text() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Server2Nginx::set_has_text() {
  _has_bits_[0] |= 0x00000001u;
}
void Server2Nginx::clear_has_text() {
  _has_bits_[0] &= ~0x00000001u;
}
void Server2Nginx::clear_text() {
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_text();
}
const ::std::string& Server2Nginx::text() const {
  // @@protoc_insertion_point(field_get:Server2Nginx.text)
  return text_.GetNoArena();
}
void Server2Nginx::set_text(const ::std::string& value) {
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Server2Nginx.text)
}
#if LANG_CXX11
void Server2Nginx::set_text(::std::string&& value) {
  set_has_text();
  text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Server2Nginx.text)
}
#endif
void Server2Nginx::set_text(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Server2Nginx.text)
}
void Server2Nginx::set_text(const char* value, size_t size) {
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Server2Nginx.text)
}
::std::string* Server2Nginx::mutable_text() {
  set_has_text();
  // @@protoc_insertion_point(field_mutable:Server2Nginx.text)
  return text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Server2Nginx::release_text() {
  // @@protoc_insertion_point(field_release:Server2Nginx.text)
  clear_has_text();
  return text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Server2Nginx::set_allocated_text(::std::string* text) {
  if (text != NULL) {
    set_has_text();
  } else {
    clear_has_text();
  }
  text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:Server2Nginx.text)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
